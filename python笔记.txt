1.函数的参数传递是按引用处理，但这个会让人困惑。结论：在python中，strings, tuples, 和numbers是不可更改的对象，而list,dict等则是可以修改的对象。修改不可更改的对象时，其实就开辟了一个新的存储空间新的对象
2.参数顺序不严格要求
3.函数的参数中星号表示不定长参数,单星号表示元组，双星号表示字典
3.lambda匿名函数，类似内联函数货define定义的短函数，但有区别

4.模块引用时，如果在更深树层目录下，需要那里有__init__.py文件。另外模块名称不能有横线，否则不能识别(自测发现)

5.codecs.open和open打开文件的区别，前者可以选择打开文件时的解码方式，后者可能默认用gbk打开而导致无法解码。所以如果有中文，可以选择前者来打开文件
6.File 对象方法: file对象提供了操作文件的一系列方法；
  OS 对象方法: 提供了处理文件及目录的一系列方法
  
7.当变量指向一个对象时，这个变量类似于C的指针或引用，python里面用引用计数来控制对象最后的析构
8.双下划綫在python中有特殊意义，比如类的私有方法和属性。一般命名不要再开头用双下划线。
  双下划线开头的变量为私有变量，有效针对类属性和成员属性。

9.python面向对象编程中，变量分为类变量和对象变量。类变量被类的所有对象在构造时共享，对象变量只属于类构造的对象。类变量不同于C++的静态变量，区别在于一个类对象对类变量进行修改后，会不会影响其它类对象中这个变量的值。
借用网上的一个总结：不管是C++还是python都大致分为3种变量/属性：
1、类属性（C++中叫静态变量，python中叫类属性）    
2、实例属性（C++中叫成员变量，python中叫成员属性)    
3、局部变量（C++中叫局部变量，python中叫局部变量)

不妥之处：
1. 3.0版本比之前的版本区别太大，比如print语法，raw_input函数等；
2. 由于语言尽量简单化，导致很多在C/C++中可以简单处理的逻辑、在python中只能通过异常处理而不是错误码。比如判断参数类型等



<class 'tuple'>: (<class 'TypeError'>, TypeError("a bytes-like object is required, not 'str'",), None)